修改配置文件

1.进入config目录

cd /usr/fuyou/kafka/kafka_2.11-0.9.0.1/config/

2.主要修改server.properties配置文件

#########################参数解释##############################

broker.id=0  #当前机器在集群中的唯一标识，和zookeeper的myid性质一样

port=9092 #当前kafka对外提供服务的端口默认是9092

host.name=192.168.7.100 #这个参数默认是关闭的，在0.8.1有个bug，DNS解析问题，失败率的问题。

num.network.threads=3 #这个是borker进行网络处理的线程数

num.io.threads=8 #这个是borker进行I/O处理的线程数

log.dirs=/opt/kafka/kafkalogs/ #消息存放的目录，这个目录可以配置为“，”逗号分割的表达式，上面的num.io.threads要大于这个目录的个数这个目录，如果配置多个目录，新创建的topic他把消息持久化的地方是，当前以逗号分割的目录中，那个分区数最少就放那一个

socket.send.buffer.bytes=102400 #发送缓冲区buffer大小，数据不是一下子就发送的，先回存储到缓冲区了到达一定的大小后在发送，能提高性能

socket.receive.buffer.bytes=102400 #kafka接收缓冲区大小，当数据到达一定大小后在序列化到磁盘

socket.request.max.bytes=104857600 #这个参数是向kafka请求消息或者向kafka发送消息的请请求的最大数，这个值不能超过java的堆栈大小

num.partitions=1 #默认的分区数，一个topic默认1个分区数

log.retention.hours=168 #默认消息的最大持久化时间，168小时，7天

message.max.byte=5242880  #消息保存的最大值5M

default.replication.factor=2  #kafka保存消息的副本数，如果一个副本失效了，另一个还可以继续提供服务

replica.fetch.max.bytes=5242880  #取消息的最大直接数

log.segment.bytes=1073741824 #这个参数是：因为kafka的消息是以追加的形式落地到文件，当超过这个值的时候，kafka会新起一个文件

log.retention.check.interval.ms=300000 #每隔300000毫秒去检查上面配置的log失效时间（log.retention.hours=168 ），到目录查看是否有过期的消息如果有，删除

log.cleaner.enable=false #是否启用log压缩，一般不用启用，启用的话可以提高性能

zookeeper.connect=192.168.7.100:12181,192.168.7.101:12181,192.168.7.107:1218 #设置zookeeper的连接端口

#########################参数解释##############################

 

#########################参数修改############################## 

broker.id=0  #每台服务器的broker.id都不能相同

host.name=192.168.7.100 #hostname

#在log.retention.hours=169下面新增下面三项

message.max.byte=5242880

default.replication.factor=2

replica.fetch.max.bytes=5242880

#设置zookeeper的连接端口

zookeeper.connect=192.168.7.100:12181,192.168.7.101:12181,192.168.7.107:12181

#########################参数修改##############################

启动kafka

启动kafka之前要启动对应的zk集群

1.启动服务

#从后台启动Kafka集群（3台都需要启动）

cd /usr/fuyou/kafka/kafka_2.11-0.9.0.1/bin 

#进入到kafka的bin目录 

./kafka-server-start.sh -daemon ../config/server.properties

2.检查kafka是否启动

#执行命令jps

20348 Jps

4233 QuorumPeerMain

18991 Kafka

3.创建topic来验证是否创建成功

#创建Topic

./kafka-topics.sh --create --zookeeper 192.168.7.100:2181 --replication-factor 2 --partitions 1 --topic shuaige

--replication-factor 2   #复制两份

--partitions 1 #创建1个分区

--topic #主题为shuaige

(以下部分我们在代码部分实现功能)

'''在一台服务器上创建一个发布者'''#创建一个broker，发布者

./kafka-console-producer.sh --broker-list 192.168.7.100:19092 --topic shuaige

'''在一台服务器上创建一个订阅者'''

./kafka-console-consumer.sh --zookeeper localhost:12181 --topic shuaige --from-beginning

4.查看其他命令

4.1 查看topic

./kafka-topics.sh --list --zookeeper localhost:12181

#就会显示我们创建的所有topic

4.2 查看topic状态

./kafka-topics.sh --describe --zookeeper localhost:12181 --topic shuaige

#下面是显示信息

     Topic: ssports    PartitionCount:1    ReplicationFactor:2    Configs:

     Topic: shuaige    Partition: 0    Leader: 1    Replicas: 0,1    Isr: 1

#分区为为1  复制因子为2   他的  shuaige的分区为0

#Replicas: 0,1   复制的为0,1

日志说明

　　kafka的日志是保存在/usr/fuyou/kafka/kafka_2.10-0.10.1.0/logs目录下的

     server.log #kafka的运行日志

     state-change.log  #kafka他是用zookeeper来保存状态，所以他可能会进行切换，切换的日志就保存在这里

     controller.log #kafka选择一个节点作为“controller”,当发现有节点down掉的时候它负责在游泳分区的所有节点中选择新的leader,这使得Kafka可以批量的高效的管理所有分区节点的主从关系。如果controller down掉了，活着的节点中的一个会备切换为新的controller.

Kafka删除相关

从kafka 0.8.2.1开始可以直接删除topic

步骤如下：
1.在kafka配置文件中添加删除参数
delete.topic.enable=true

2.利用命令删除需要删除的topic
./kafka-topics.sh --delete --zookeeper localhost:2181 --topic mytest


